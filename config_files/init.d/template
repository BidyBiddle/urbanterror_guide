#! /bin/bash
#
# File   : example 
# Author : Sebastien VARRETTE <Sebastien.Varrette@uni.lu>
#          (Web page : http://varrette.gforge.uni.lu)
# Creation date : 23 Jul 2009
# Time-stamp: <2009-07-28 14:18:55 svarrette>
# $Id$
#
# Copyright (c) 2009 Sebastien Varrette (Sebastien.Varrette@uni.lu)
#
# Description : init.d startup script with LSB support for XXXX
#               LSB support: http://wiki.debian.org/LSBInitScripts
# See http://varrette.gforge.uni.lu/download/scripts/init.d.template_example  
#
# This program is free software; you can redistribute it and/or modify it under the terms 
# of the GNU General Public License as published by the Free Software Foundation; either 
# version 2 of the License, or (at your option) any later version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; 
# without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  
# See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with this 
# program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, 
# Fifth Floor, Boston, MA  02110-1301, USA.
# 
# Sebastien Varrette <Sebastien.Varrette@uni.lu> 
# University of Luxembourg 
# 6, rue Richard Coudenhove-Kalergi
# L-1359 Luxembourg, LUXEMBOURG
#
# Note: inspired by /etc/init.d/skeleton and utrac debian/init.d.lsb.ex file
# see http://bzr.harobed.org/utrac/utrac 
#
### BEGIN INIT INFO
# Provides:          XXXXX
# Required-Start:    $local_fs
# Required-Stop:     $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: <Enter a short description of the sortware>
# Description:       <Enter a long description of the software>
#                    <...>
#                    <...>
### END INIT INFO

VERSION=0.1
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin
DESC="Description of the service"
#NAME=daemonexecutablename
NAME=urbanterror
DAEMON=/usr/sbin/${NAME}          # server executable 
SCRIPTNAME=/etc/init.d/${NAME}

LOGDIR=/var/log/${NAME}              # Log directory to use
PIDFILE=/var/run/${NAME}/${NAME}.pid # PID file

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
. /lib/lsb/init-functions

# Default options, these can be overriden by the information at /etc/default/${NAME}
DAEMON_OPTS=""          # Additional options given to the server
#DAEMON_USER=user        # User to run the daemons as. 
#DAEMON_GROUP=group      # Group to run the daemon as.
DAEMON_START_OPTS=""     # additionnal options for start-stop-daemon in do_start

# Include defaults if available
[ -r /etc/default/${NAME} ] && . /etc/default/$NAME

# Exit if the server executable is not present
if [ ! -x "${DAEMON}" ]; then 
    echo "Could not find ${DAEMON}"
    exit 99
fi

# Check that the user exists (if a user is set)
if [ -n "$DAEMON_USER" ] ; then
    if [ ! `getent passwd | grep "^${DAEMON_USER}:"` ]; then 
	log_failure_msg "The user $DAEMON_USER, required to run ${NAME} does not exist."
        exit 1
    fi
fi
# Check that the group exists (if a group is set)
if [ -n "$DAEMON_GROUP" ] ; then
    if [ ! `getent group | grep "^${DAEMON_GROUP}:"` ]; then 
	log_failure_msg "The group $DAEMON_GROUP, required to run ${NAME} does not exist."
        exit 1
    fi
fi

# configure pid file
PIDDIR=`dirname "${PIDFILE}"`
if [ "${PIDDIR}" -a "${PIDDIR}" != "/var/run" ] ; then
    [ ! -d "${PIDDIR}"  ] && mkdir "${PIDDIR}"
    [ "${DAEMON_USER}"  ] && chown "${DAEMON_USER}"  "${PIDDIR}"
    [ "${DAEMON_GROUP}" ] && chgrp "${DAEMON_GROUP}" "${PIDDIR}"
fi

######### specific  functions ##########

# Various print functions
print_error_and_exit() { echo $1; exit 1; }
print_usage() {
    cat <<EOF
This is $SCRIPTNAME version "$VERSION", ${DESC} startup script.

   Copyright (c) 2009 Sebastien Varrette  (http://varrette.gforge.uni.lu)

Usage: $SCRIPTNAME {start|stop|restart|status|restart|reload|force-reload}

This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
EOF
}

###
# check the daemon/service
##
check_running_daemon() {
    local basedaemon=`basename ${DAEMON}` 
    local nb_process=`ps ax | grep $basedaemon | grep -v grep | wc -l`
    [ ! -f "${PIDFILE}" ] && return 1
    if [ $nb_process -gt 1 ]; then
        log_warning_msg "is running multiple times"
        return 0
    fi
    pidofproc -p ${PIDFILE} $basedaemon >/dev/null
    return $?
}

###
# operate daemon status checking
##
do_status() {
#    status_of_proc ${DAEMON} ${NAME} -p ${PIDFILE}
#    return $?
    log_daemon_msg "Checking status of $DESC" "$NAME"
    check_running_daemon
    RETVAL=$?
    [ $RETVAL -eq 0 ] && log_progress_msg "is running" || \
	log_progress_msg "is not running"
    log_end_msg 0
    return $RETVAL
}

###
# start the daemon/service
##
do_start() {
    if [ -z "${DAEMON_USER}" ] ; then
        start_daemon -p ${PIDFILE} ${DAEMON} -- ${DAEMON_OPTS}
        RETVAL=$?
    else
	start-stop-daemon \
	    --start --quiet --chuid ${DAEMON_USER}:${DAEMON_GROUP}     \
            --pidfile ${PIDFILE} --make-pidfile --background --oknodo  \
	    --startas ${DAEMON} ${DAEMON_START_OPTS} -- ${DAEMON_OPTS}
        RETVAL=$?	
    fi
    return $RETVAL
}

###
# stop the daemon/service
##
do_stop() {
    if [ -z "${DAEMON_USER}" ] ; then
        killproc -p ${PIDFILE} ${DAEMON}
        RETVAL=$?
    else
	start-stop-daemon \
	    --stop --signal 15 --retry 5 --quiet --oknodo \
	    --pidfile ${PIDFILE} --user ${DAEMON_USER} --exec ${DAEMON}
	RETVAL=$?	
    fi
    # Many daemons don't delete their pidfiles when they exit.
    [ "$RETVAL" = 0 ] && rm -f $PIDFILE
    return $RETVAL
}

###
# reload the daemon/service
##
do_reload() {
    if check_running_daemon ; then  
	start-stop-daemon --stop --signal 1 --quiet --pidfile ${PIDFILE} --name ${NAME}
	return $?
    fi
    return 0
}

############ proceed to the command-line option ###########
RETVAL=0
case "$1" in
    start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	# Check if it's running first
        if check_running_daemon ;  then
            log_progress_msg "is already running"
            log_end_msg 0
            exit 0
        fi
        do_start
	RETVAL=$?
	[ "$VERBOSE" != no ] && log_end_msg $RETVAL
        ;;
  stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        # Check if it's running first
        if check_running_daemon ;  then
	    do_stop
	    RETVAL=$?
	    [ "$VERBOSE" != no ] && log_end_msg $RETVAL
	else
	    log_progress_msg "is not running"
            log_end_msg 0
 	fi
        ;;
    reload)
	# Use this if the daemon cannot reload
        log_warning_msg "\nReloading ${NAME}: not implemented, as the daemon"
        log_warning_msg "\ncannot re-read the config file (use restart instead)."
	# ... or this if it can
	#log_daemon_msg "Reloading $DESC configuration files" "$NAME"
	#do_reload
        #log_end_msg $?
        ;;
    restart|force-reload)
	[ "$VERBOSE" != no ] && log_daemon_msg "Restarting $DESC" "$NAME"
        if ! check_running_daemon ;  then
            [ "$VERBOSE" != no ] && log_warning_msg "... were not running"
	    [ "$VERBOSE" != no ] && log_daemon_msg "Now trying to start $DESC" "$NAME"
        else 
	    do_stop
	    RETVAL=$?
	    if [ $RETVAL -ne 0 ]; then 
		log_progress_msg "stopping "
		log_end_msg 1
		exit $RETVAL
	    fi
	fi	
	do_start
	RETVAL=$?
	case "$RETVAL" in
	    0) log_end_msg 0 ;;
	    *) log_progress_msg "starting "; log_end_msg 1 ;;
	esac
	do_status
	;;
    status) 
	do_status
	RETVAL=$?
	;;
    *)      
	print_usage
	RETVAL=3;;
esac
exit $RETVAL

:
